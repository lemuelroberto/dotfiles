#!/usr/bin/env bash

set -euEo pipefail
trap 'echo "${BASH_SOURCE:-unknown}:${LINENO:-unknown}: $BASH_COMMAND";' ERR

usage="
Usage: $(basename "$0") [OPTIONS] <relative/path/to/ignore>

OPTIONS:
  -h, --help                   Print this help
"

help_and_exit() {
  echo "$usage"
  exit 0
}

exit_with_msg() {
  echo >&2 "$1"
  exit 1
}

exit_with_msg_and_help() {
  echo >&2 "$1"
  echo >&2 "$usage"
  exit 1
}

# Read arguments
# Read the getopt manual using man getopt
# Learn from examples in /usr/share/doc/util-linux/
opts=$(
  getopt \
    --name "$(basename "$0")" \
    --longoptions "help" \
    --options "h" \
    -- "$@"
)

# The eval is required as arguments returned by getopt are quoted.
eval set -- "$opts"
unset opts

while true; do
  case "$1" in
    -h | --help)
      help_and_exit
      ;;

    --)
      shift
      break
      ;;

    *)
      exit_with_msg "getopt: unexpected error: $1"
      ;;
  esac
done

# Exit if a target file was not provided
if [[ "$#" -ne 1 ]]; then
  exit_with_msg_and_help "error: you must provide exactly one file to ignore"
fi

target="$1"

readonly IGNORED=".gitignore"

commit() {
  git add "$IGNORED"
  git commit -m "$1"
}

# Create .gitignore file
if [[ ! -f "$IGNORED" ]]; then
  touch "$IGNORED"
  commit "Add .gitignore file"
fi

# Exit if .gitignore file has changes to be staged
if [[ -n $(git diff "$IGNORED") ]]; then
  exit_with_msg "error: you have changes to be staged"
fi

# Exit if repo has changes to be committed
if [[ -n $(git diff --staged) ]]; then
  exit_with_msg "error: you have changes to be committed"
fi

# Normalize directories paths
if [[ -d "${target}" ]]; then
  target="${target##\/}" # Remove slash (/) from the beginning
  target="${target%%\/}" # Remove slash (/) from the ending
  target="${target}/"    # Add slash to the ending
fi

# Sort .gitignore entries
LC_ALL=C sort -f -o "$IGNORED" "$IGNORED"
if [[ -n $(git diff "$IGNORED") ]]; then
  commit "Sort .gitignore file"
fi

# Ignore $target file
echo "${target}" >> "$IGNORED"
LC_ALL=C sort -f -o "$IGNORED" "$IGNORED"
if [[ -d "${target}" ]]; then
  commit "Ignore ${target} files"
else
  commit "Ignore ${target} file"
fi
